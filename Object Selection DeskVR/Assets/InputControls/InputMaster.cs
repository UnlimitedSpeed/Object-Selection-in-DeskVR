//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/InputControls/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""DepthRay"",
            ""id"": ""23cd7bf6-888a-43e4-bb0a-6c434504f6f8"",
            ""actions"": [
                {
                    ""name"": ""CastRay"",
                    ""type"": ""Value"",
                    ""id"": ""d3e0bbea-c84d-4334-8727-90bdce684e4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveSphere"",
                    ""type"": ""Value"",
                    ""id"": ""7762bf7b-b0d7-4f25-ad38-31663ddc3cc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ComfirmSelection"",
                    ""type"": ""Button"",
                    ""id"": ""b65c3c23-7724-4dee-b1af-b0c56f07615f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1be571b-5d74-410c-9174-e33b00142517"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastRay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae281d4e-9f79-4291-a368-68a1bbaf250b"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CastRay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""960b8213-0626-42fe-8284-825afcb9e5d3"",
                    ""path"": ""<XRController>{RightHand}/gripButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ComfirmSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""867a061b-4175-450d-b135-298ef20a9eac"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveSphere"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a36eaba4-4372-4427-bd85-3814edbb54f9"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveSphere"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a060075e-4bb7-4b51-98f8-57fe251ebe05"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveSphere"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""TouchPad"",
            ""id"": ""d0da20ae-d0c7-42aa-8b76-2a49d1d98f0a"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""11ef1abd-5d86-47ba-844e-9112e79febb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveTouch"",
                    ""type"": ""Value"",
                    ""id"": ""f91d8ca3-10e4-4d34-b436-fb04d3f5a664"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""710b156d-4a8b-455a-9173-ddbc7d733f16"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5eff482a-1bc6-4f93-a2b9-4c2b5a29032c"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DepthRay
        m_DepthRay = asset.FindActionMap("DepthRay", throwIfNotFound: true);
        m_DepthRay_CastRay = m_DepthRay.FindAction("CastRay", throwIfNotFound: true);
        m_DepthRay_MoveSphere = m_DepthRay.FindAction("MoveSphere", throwIfNotFound: true);
        m_DepthRay_ComfirmSelection = m_DepthRay.FindAction("ComfirmSelection", throwIfNotFound: true);
        // TouchPad
        m_TouchPad = asset.FindActionMap("TouchPad", throwIfNotFound: true);
        m_TouchPad_Touch = m_TouchPad.FindAction("Touch", throwIfNotFound: true);
        m_TouchPad_MoveTouch = m_TouchPad.FindAction("MoveTouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DepthRay
    private readonly InputActionMap m_DepthRay;
    private IDepthRayActions m_DepthRayActionsCallbackInterface;
    private readonly InputAction m_DepthRay_CastRay;
    private readonly InputAction m_DepthRay_MoveSphere;
    private readonly InputAction m_DepthRay_ComfirmSelection;
    public struct DepthRayActions
    {
        private @InputMaster m_Wrapper;
        public DepthRayActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @CastRay => m_Wrapper.m_DepthRay_CastRay;
        public InputAction @MoveSphere => m_Wrapper.m_DepthRay_MoveSphere;
        public InputAction @ComfirmSelection => m_Wrapper.m_DepthRay_ComfirmSelection;
        public InputActionMap Get() { return m_Wrapper.m_DepthRay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DepthRayActions set) { return set.Get(); }
        public void SetCallbacks(IDepthRayActions instance)
        {
            if (m_Wrapper.m_DepthRayActionsCallbackInterface != null)
            {
                @CastRay.started -= m_Wrapper.m_DepthRayActionsCallbackInterface.OnCastRay;
                @CastRay.performed -= m_Wrapper.m_DepthRayActionsCallbackInterface.OnCastRay;
                @CastRay.canceled -= m_Wrapper.m_DepthRayActionsCallbackInterface.OnCastRay;
                @MoveSphere.started -= m_Wrapper.m_DepthRayActionsCallbackInterface.OnMoveSphere;
                @MoveSphere.performed -= m_Wrapper.m_DepthRayActionsCallbackInterface.OnMoveSphere;
                @MoveSphere.canceled -= m_Wrapper.m_DepthRayActionsCallbackInterface.OnMoveSphere;
                @ComfirmSelection.started -= m_Wrapper.m_DepthRayActionsCallbackInterface.OnComfirmSelection;
                @ComfirmSelection.performed -= m_Wrapper.m_DepthRayActionsCallbackInterface.OnComfirmSelection;
                @ComfirmSelection.canceled -= m_Wrapper.m_DepthRayActionsCallbackInterface.OnComfirmSelection;
            }
            m_Wrapper.m_DepthRayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CastRay.started += instance.OnCastRay;
                @CastRay.performed += instance.OnCastRay;
                @CastRay.canceled += instance.OnCastRay;
                @MoveSphere.started += instance.OnMoveSphere;
                @MoveSphere.performed += instance.OnMoveSphere;
                @MoveSphere.canceled += instance.OnMoveSphere;
                @ComfirmSelection.started += instance.OnComfirmSelection;
                @ComfirmSelection.performed += instance.OnComfirmSelection;
                @ComfirmSelection.canceled += instance.OnComfirmSelection;
            }
        }
    }
    public DepthRayActions @DepthRay => new DepthRayActions(this);

    // TouchPad
    private readonly InputActionMap m_TouchPad;
    private ITouchPadActions m_TouchPadActionsCallbackInterface;
    private readonly InputAction m_TouchPad_Touch;
    private readonly InputAction m_TouchPad_MoveTouch;
    public struct TouchPadActions
    {
        private @InputMaster m_Wrapper;
        public TouchPadActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_TouchPad_Touch;
        public InputAction @MoveTouch => m_Wrapper.m_TouchPad_MoveTouch;
        public InputActionMap Get() { return m_Wrapper.m_TouchPad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchPadActions set) { return set.Get(); }
        public void SetCallbacks(ITouchPadActions instance)
        {
            if (m_Wrapper.m_TouchPadActionsCallbackInterface != null)
            {
                @Touch.started -= m_Wrapper.m_TouchPadActionsCallbackInterface.OnTouch;
                @Touch.performed -= m_Wrapper.m_TouchPadActionsCallbackInterface.OnTouch;
                @Touch.canceled -= m_Wrapper.m_TouchPadActionsCallbackInterface.OnTouch;
                @MoveTouch.started -= m_Wrapper.m_TouchPadActionsCallbackInterface.OnMoveTouch;
                @MoveTouch.performed -= m_Wrapper.m_TouchPadActionsCallbackInterface.OnMoveTouch;
                @MoveTouch.canceled -= m_Wrapper.m_TouchPadActionsCallbackInterface.OnMoveTouch;
            }
            m_Wrapper.m_TouchPadActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Touch.started += instance.OnTouch;
                @Touch.performed += instance.OnTouch;
                @Touch.canceled += instance.OnTouch;
                @MoveTouch.started += instance.OnMoveTouch;
                @MoveTouch.performed += instance.OnMoveTouch;
                @MoveTouch.canceled += instance.OnMoveTouch;
            }
        }
    }
    public TouchPadActions @TouchPad => new TouchPadActions(this);
    public interface IDepthRayActions
    {
        void OnCastRay(InputAction.CallbackContext context);
        void OnMoveSphere(InputAction.CallbackContext context);
        void OnComfirmSelection(InputAction.CallbackContext context);
    }
    public interface ITouchPadActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnMoveTouch(InputAction.CallbackContext context);
    }
}
